#!/usr/bin/env node

var falafel = require('falafel');

var content = '';
process.stdin.resume();
process.stdin.on('data', function(buf) { content += buf.toString(); });
process.stdin.on('end', function() {
  var statistics = {};
  var props = ['argument', 'params', 'id', 'body', 'test', 'left', 'right', 'init', 'object', 'declarations', 'property', 'expression', 'callee', 'consequent', 'arguments', 'elements', 'properties', 'key', 'value', 'expressions']

  function processNode(node, key, depth) {
    if (depth === 0) {
      return;
    }

    props.forEach(function(prop) {
      if (node[prop]) {
        var newKey = key + '.' + prop;
        if (Array.isArray(node[prop])) {
          node[prop].forEach(function(child, i) {
            var propStats = (statistics[newKey] = statistics[newKey] || {});
            propStats[child.type] = propStats[child.type] || 0;
            propStats[child.type]++;
            processNode(child, newKey + '.' + child.type, depth - 1);
          });
        } else {
          var propStats = (statistics[newKey] = statistics[newKey] || {});
          propStats[node[prop].type] = propStats[node[prop].type] || 0;
          propStats[node[prop].type]++;
          processNode(node[prop], newKey + '.' + node[prop].type, depth - 1);
        }
      }
    });
  }

  falafel(content, function(node) {
    processNode(node, node.type, 3);
  });

  console.log(JSON.stringify(statistics));
});
